snippet script "CLI Script Init" bm
#!/usr/bin/php -q

<?php

$0
endsnippet

snippet log "Log error" bm
\Log::error(${1:message});
$0
endsnippet

snippet log_ex "Log Exception" bm
\Log::error(__METHOD__." failed.\tMessage: ".$e->getMessage());
$0
endsnippet

snippet l_route "laravel route" bm
Route::${1:get}('/$2', '$3@$4')->name('$4');
endsnippet

snippet l_cache_meth "Boilerplate for method with caching and try/catch" bm
$cacheName = self::cacheNameFromOptions(__METHOD__, $options);                                                      

if( ! $results = \Cache::get($cacheName, false)){                                                                   

    try{

        \Cache::put($cacheName, $results, 360);                                                                     

    } catch (\Exception $e) {                                                                                       
        $msg = $e->getMessage();                                                                                    
        $request = $this->soapClient->__getLastRequest();
        \Log::error("Call to ".__METHOD__." failed. Options: ".json_encode(@$options)."\tMessage: ".$msg."\tRequest:".$request);       
    }                                                                                                               

    if($debug){
        \Log::info("Cache miss / no cache on call to ".__METHOD__." method. Options: ".json_encode(@$options)."\tRequest: ".$this->soapClient->__getLastRequest());
    }
 
}else{
    if($debug){
        \Log::info("Cache hit to ".__METHOD__." method. Options: ".json_encode(@$options));
    }
}
endsnippet

snippet l_cache_rem "Boilerplate for laraevl cache remember" bm
$$1 = \Cache::remember("${2:cache_name}", ${3:length_seconds}, function () use ($$4) {

    $0

    // laravel will not cache null, so if no match cache false
    $$1 = $$1 ?? false;

    return $$1;

});
endsnippet

snippet l_ctrl_meth "Laravel controller method" bm
public function ${1:name}(${2:$param}){

    $0

    return view('${3:view}')
        ->with('pageTitle', '${4:pageTitle}')
        ->with('pageDescription', '${5:pageDescription}')
    ;    

}    
endsnippet

snippet l_ret_view "return a view in laravel" bm
return view('$1')
    ->with('$2', $$2)
    ->with('pageTitle', '${3:pageTitle}')
    ->with('pageDescription', '${4:pageDescription}')
;
endsnippet

snippet l_response_json "dispatch laravel json response" bm
return response()->json([ $0 ]);
endsnippet

snippet l_man_val "laravel manual validation"
$validator = \Validator::make($request->all(), [
    '$1' => 'required|unique:posts|max:255',
]);

if ($validator->fails()) {
    return redirect()->back()->withErrors($validator)->withInput();
}
endsnippet

snippet l_mut "laravel mutator"
    /**
     * Set the $3.
     *
     * @param  string  $value
     * @return void
     */
    public function set$1Attribute($value)
    {
        $this->attributes['$2'] = strtolower($value);
        $0
    }
endsnippet

snippet curl_get "curl get request boilerplate" bm

$endpoint = "${1:endpoint}";
$ch = curl_init();

$options = array(
    CURLOPT_URL            => $endpoint,
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_HEADER         => true,
    CURLOPT_FOLLOWLOCATION => true,
    CURLOPT_ENCODING       => "",
    CURLOPT_AUTOREFERER    => true,
    CURLOPT_CONNECTTIMEOUT => 120,
    CURLOPT_TIMEOUT        => 120,
    CURLOPT_MAXREDIRS      => 10,
    CURLOPT_USERAGENT      => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:45.0) Gecko/20100101 Firefox/45.0',
);

curl_setopt_array( $ch, $options );
$response = curl_exec($ch); 
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

if ( $httpCode != 200 ){
    echo "Return code is {$httpCode} \n".curl_error($ch);
} else {
    echo "<pre>".htmlspecialchars($response)."</pre>";
}

curl_close($ch);
endsnippet

snippet curl_post "curl post request boilerplate" bm

$endpoint = "${1:endpoint}";
$data = [
    $2 => $3,
];
$ch = curl_init();

$options = array(
    CURLOPT_URL            => $endpoint,
    CURLOPT_POST           => true,
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_HEADER         => true,
    CURLOPT_FOLLOWLOCATION => true,
    CURLOPT_ENCODING       => "",
    CURLOPT_AUTOREFERER    => true,
    CURLOPT_CONNECTTIMEOUT => 120,
    CURLOPT_TIMEOUT        => 120,
    CURLOPT_MAXREDIRS      => 10,
    CURLOPT_USERAGENT      => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:45.0) Gecko/20100101 Firefox/45.0',
    CURLOPT_POSTFIELDS     => http_build_query($data),
);

curl_setopt_array( $ch, $options );
$response = curl_exec($ch); 
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

if ( $httpCode != 200 ){
    echo "Return code is {$httpCode} \n".curl_error($ch);
} else {
    echo "<pre>".htmlspecialchars($response)."</pre>";
}

curl_close($ch);
endsnippet

snippet hasMany "Eloquent has many relationship" bm
/**
 * ${3:desc}
 */
public function ${1:name}()
{
    return $this->hasMany('${2:relation}');
}
$0
endsnippet

snippet belongsTo "Eloquent belongs to relationship" bm
/**
 * ${3:desc}
 */
public function ${1:name}()
{
    return $this->belongsTo('${2:relation}');
}
$0
endsnippet

snippet cli_out "CLI output" bm
echo "\n[".date('Y-m-d H:i:s')."] - ${1:message}";
$0
endsnippet

snippet l_fillable "Fillable eloquent property" bm
/**
 * The attributes that are mass assignable.
 *
 * @var array
 */
protected $fillable = [${1:fields}];
$0
endsnippet

snippet l_guarded "Guarded eloquent property" bm
/**
 * The attributes that aren't mass assignable.
 *
 * @var array
 */
protected $guarded = [${1:fields}];
$0
endsnippet

snippet gf_debug_fields "Debug Gravity Forms submitted fields" bm
	echo '<pre>';
    foreach ( $form['fields'] as $field ) {
        $inputs = $field->get_entry_inputs();
        if ( is_array( $inputs ) ) {
            foreach ( $inputs as $input ) {
                $value = rgar( $entry, (string) $input['id'] );
                echo "\nInput ID: ".$input['id'].' - '.$value;
            }
        } else {
            $value = rgar( $entry, (string) $field->id );
            echo "\nInput ID: ".$field->id.' - '.$value;
        }
    }
    exit;
endsnippet

snippet gf_debug_log "Write to Gravity Forms debug log" bm
GFCommon::log_debug(${1:message});
endsnippet

snippet gf_field_validation "GF custom field validation" bm
add_filter("gform_field_validation_${1:form_id}_${2:field_id}", "${3:function_name}", 10, 4);
$0
endsnippet

snippet elo_left_join "eloquent left join" bm
->leftJoin('$1', '$2', '=', '$3')
endsnippet

snippet lm_soft_del "laravel migration soft delete" bm
$table->softDeletes();
endsnippet

snippet lm_drop_col "laravel migration drop column" bm
$table->dropColumn('${1:col}');
endsnippet

snippet l_use_soft_del "laravel use soft deletes" bm
use Illuminate\Database\Eloquent\SoftDeletes;
endsnippet

snippet lm_date "laravel migration for date column" bm
$table->date('${1:col}');
endsnippet

snippet lm_col "laravel migration column" bm
$table->$1('${2:col}')->default($3);
endsnippet

snippet lm_col_null "laravel migration nullable column" bm
$table->$1('${2:col}')->nullable()->default($3);
endsnippet

snippet lm_str "laravel migration for string column" bm
$table->string('${1:col}');
endsnippet

snippet lm_str_null "laravel migration for nullable string column" bm
$table->string('${1:col}')->nullable();
endsnippet

snippet lm_enum "laravel migration enum"
//defaults to first option declared in array
$table->enum('$1', ['$2', '$3']);
endsnippet

snippet lm_enum_null "laravel migration enum default null"
$table->enum('$1', ['$2', '$3'])->nullable();
endsnippet

snippet scandir "php scandir strategy" bm
$path = '${1:path}';
$files = array_diff(scandir($path), ['.', '..']);
endsnippet

snippet array_search "php array_search" bm
array_search(${1:needle}, ${2:haystack});
endsnippet

snippet wp_debug "wordpress debug config boilerplate" bm
// Enable WP_DEBUG mode
define( 'WP_DEBUG', true );

// Enable Debug logging to the /wp-content/debug.log file
define( 'WP_DEBUG_LOG', true );

// Disable display of errors and warnings
define( 'WP_DEBUG_DISPLAY', false );
@ini_set( 'display_errors', 0 );
endsnippet

snippet server_ip "php server ip" bm
$_SERVER['SERVER_ADDR'];
endsnippet

snippet exec "php exec" bm
exec("${1:cmd}", $returnArr, $returnCode);
endsnippet

snippet parent_con "call parent constructor" bm
parent::__construct();
endsnippet

snippet unparse_url_func "function to unparse url after using parse_url function" bm
function unparse_url($parsed_url) {
    $scheme   = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : '';
    $host     = isset($parsed_url['host']) ? $parsed_url['host'] : '';
    $port     = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '';
    $user     = isset($parsed_url['user']) ? $parsed_url['user'] : '';
    $pass     = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : '';
    $pass     = ($user || $pass) ? "$pass@" : '';
    $path     = isset($parsed_url['path']) ? $parsed_url['path'] : '';
    $query    = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';
    $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : '';
    return "$scheme$user$pass$host$port$path$query$fragment";
}
endsnippet

snippet print_r_debug "print_r debug output" bm
echo '<pre>'; print_r($$1); echo '</pre>';
endsnippet

snippet l_db_raw "raw query part" bm
->select(DB::raw('$1 as $2, $3'))
endsnippet

snippet l_scope "laravel scope" bm
/**
 * Scope a query to $4.
 *
 * @param \Illuminate\Database\Eloquent\Builder $query
 * @return \Illuminate\Database\Eloquent\Builder
 */
public function scope$1($query)
{
    return $query->where('$2', '$3')$0;
}
endsnippet

snippet dedupe_ass "dedupe an associative array based on value" bm
$taken = [];

foreach($items as $k => $item) {
    if( ! in_array($item[$1], $taken)) {
        $taken[] = $item[$1];
    } else {
        unset($items[$k]);
    }
}
endsnippet

snippet can_meth "boilerplate can meth"
/**
 * $1
 *
 * @return stuff
 */
public function $2()
{

    $payload = $this->buildPayload('$3');

    $body = $this->sendRequest($payload);

    $success = $this->determineSuccess($body);

    if($success){

        $data = $body[0]['tables']['table0'] ?? null;

        return $data;

    }

    return null;

}
endsnippet

snippet ls_put "laravel session store an item"
session(['$1' => '$2']);
endsnippet

snippet ls_pull "laravel pull item from session"
session()->pull('$1', '$2');
endsnippet

snippet cli_boiler "cli boilerplate php command using splitbrain cli boilerplate"
#!/usr/bin/php
<?php
require __DIR__.'/../vendor/autoload.php';
use splitbrain\phpcli\CLI;
use splitbrain\phpcli\Options;

class $1 extends CLI
{
    // register options and arguments
    protected function setup(Options $options)
    {
        $options->setHelp('$2');
        $options->registerOption('version', 'print version', 'v');
    }

    // implement your code
    protected function main(Options $options)
    {
        if ($options->getOpt('version')) {
            $this->info('1.0.0');
        } else {
            echo $options->help();
        }
    }
}
// execute it
$cli = new $1();
$cli->run();
endsnippet

snippet l_cmd_base "laravel artisan command boilerplate"
<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

class $1 extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = '$1';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '$2';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $3
    }
}
//TODO - move this to app/Console/Kernel.php to register command
//Commands\\$1::class,
endsnippet

snippet l_cmd "laravel artisan command boilerplate with dry run option"
<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

class $1 extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = '$1
        {--D|dry : Dry run}
    ';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '$2';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {

        $dry = $this->option('dry');

        if($dry){
            $this->info('Dry run option enabled - no changes will be made');
        }else{
            $this->warn('Dry run option disabled - changes will be applied.');
        }

        $3
    }
}
//TODO - move this to app/Console/Kernel.php to register command
//Commands\\$1::class,
endsnippet

snippet throw "throw exception"
throw new \Exception('$1');
$0
endsnippet

snippet json_decode "json_decode with error handling"
json_decode($response, true);

if(json_last_error() !== JSON_ERROR_NONE){
    throw new \Exception('json not well-formed; json error code: '.json_last_error());
}
endsnippet

snippet json_encode "json_encode with error handling"
try {

    $$1 = json_encode($2);

    if($1 === false){
        throw new \Exception('json_encode() failed: '.json_last_error_msg().' (Error code: '.json_last_error().')');
    }

} catch (\Exception $e) {
    \Log::error(__METHOD__." failed.\tMessage: ".$e->getMessage());
}

$0
endsnippet
